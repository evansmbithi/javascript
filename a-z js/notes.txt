CONST
always use const as a default
it's good practice to have as little variable mutations as possible
changing variables introduces a potential to create bugs

operator precedence - order in which js knows how to execute operators
everythng inside () is executed first
MDN docs for more info

TYPE CONVERSION
type conversion is when we manually convert variables from one type to another (explicit)
type coersion is when js automatically converts types implicitly

NaN - invalid number
typeof NaN === 'number'

OPERATORS
'23' - '10' - 3 == 10
the minus (-) operator triggers the opposite conversion; strings are converted to numbers
whereas (+) concatenates numbers into strings

js will convert strings to numbers automatically, the only way in which it does not do that is
with the (+) operator

FALSY & TRUTHY
falsy values: 0, '', undefined, null, NaN
are NOT exactly false values but will become once converted to boolean
everything else are truthy values, will become true when converted to a boolean
any string that is not an empty string is a truthy value
An empty object is a truthy value
Boolean({}) === true

ES6
During development use the most latest version of the chrome browser
During production use Babel to transpile and polyfill your code (converting back to ES5 to ensure
browser compatibility for all users). This is only necessary after your app is developed and is ready for shipping.

js is NOT forwards compatible; cannot understand syntax of the future eg ES2089

STRICT MODE
strict mode allows to write secure js code
'use strict'; // always begin js with this line
This avoids accidental errors:
forbids us to do certain things,
it creates visible errors in the console or fail silently.
Produces error messages that tell us exactly what is going on.

FUNCTIONS
Function declarations can actually be called before they're declared. This is not possible with function expressions.

const age = calcAge(1991);

const calcAge = function (birthYear) {
return 2023 - birthYear;
};

Uncaught ReferenceError: can't access lexical declaration 'calcAge' before initialization

Return statement immediately exits a function.

ARRAYS
array.unshift() adds new elements to the left of an array
array.shift() removes
friends = ['jay', 'jones', 'james']

friends.unshift('john')

Array(4) [ "john", "jay", "jones", "james" ]

push() and pop() manipulates the rightmost elements of an array

array.includes() will simply return true if an element is in the array and false if it's not.
Uses strict comparison. No type coersion.
we can use this to write conditionals.

const jay = friends.includes('jay')
true

if (jay) console.log(`${jay} is available`)

OBJECTS
'undefined' is what we get when we try to access a property that does not exist.
we can use bracket notation to access object values 

object['key'] = 'value'

function declarations simply don't work inside objects, we need to use expressions.

const object = {
    calcAge : function (birthYear){
        console.log(this)
        return 2023 - birthYear;
    }
};

you can also use bracket notation to call methods

object['calcAge'](1998);
object.calcAge(1998);

'this' returns the whole object

LOOPS
FOR loop keeps running while condition is true.